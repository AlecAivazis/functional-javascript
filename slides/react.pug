section
    section
        h2 building web interfaces

    section
        h2 HTML
        pre
            code.
                &lt;div&gt;
                    &lt;button id="button"&gt;
                        hello
                    &lt;/button&gt;
                &lt;/div&gt;

    section
        h2 jQuery
        .row
            .column
                pre
                    code.
                        &lt;div&gt;
                            &lt;button id="button"&gt;
                                hello
                            &lt;/button&gt;
                        &lt;/div&gt;
            .column
                pre
                    code.
                        $("#button").on('click', (event) => {
                            button.style('color', 'red')
                        })


    section
        span(style="display: flex; align-items: center; justify-content: center; font-size: 80px")
            img.ds_logo(src="static/images/react.svg", style="margin-right: 25px;")
            | React
        aside.notes
            | Now that we've covered the functional basics, let's build some UIs.
            br
            | Used to be imperative
            br
            | Now is functional
    section
        .row.illustration
            img(style="height: 25%;", src="static/images/html-logo.png")
            i.fa.fa-long-arrow-right(style="color: white; font-size: 94px; margin-left: 45px;")
                | &nbsp;
            img(style="height: 45%;" src="static/images/js-logo.png")
        aside.notes
            | React's entire philosophy is based around making javascript the single tool in the
            | web developer's toolkit.

    section
        .row
            .column
                pre.flat(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
                    code(style="max-height: none").
                        &lt;div&gt;
                            &lt;div class="navigation"&gt;
                                &lt;ul&gt;
                                    &lt;li&gt; nav1 &lt;/li&gt;
                                    &lt;li&gt; nav2 &lt;/li&gt;
                                    &lt;li&gt; nav3 &lt;/li&gt;
                                &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;div class="content"&gt;
                            &lt;/div&gt;
                            &lt;div class="footer"&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;

                        &lt;script src="app.js"&gt;

            .column.fragment.current-visible(data-fragment-index=1, style="justify-content: center;")
                pre.flat(style="display: flex; max-height: none; font-size: 20px; margin-bottom: 10px;")
                    code(style="max-height: none").
                        &lt;div&gt;
                            &lt;Navigation&gt;
                            &lt;Content&gt;
                            &lt;Footer&gt;
                        &lt;/div&gt;

    section
        h3 More syntax!
        aside.notes
            | In order to do that, we first have to cover some more syntax

    section
        pre.flat.fragment.current-visible(data-fragment-index=2)
            code.
                import React from 'react'
                import ReactDom from 'react-dom'
        pre.flat
            code.


                const MyElement = () => (
                    &lt;div&gt;
                        hello world!
                    &lt;/div&gt;
                )
        span(style="display:flex; margin-top: 32px")
            pre.flat.fragment.current-visible(data-fragment-index=1)
                code.
                    // rendered with &lt;MyElement /&gt;
        span(style="display:flex; margin-top: -31px")
            pre.flat.fragment.current-visible(data-fragment-index=2)
                code.
                    // render over a specific element
                    ReactDom.render(&lt;MyElement /&gt, document.getElementById('app'))
        span(style="display:flex; margin-top: -61px")
            pre.flat.fragment(data-fragment-index=3)
                code.
                    // rendered with &lt;MyElement /&gt;
        aside.notes
            ol
                li mention jsx as an extension of javascript adding syntactic sugar
                li this makes rendering our custom elements feel very natural alongside the standard html one
                li in order to actually render our component tree, we have to do so over a single element

    section
        h3 inline expressions
        pre
            code.
                const name = "John"

                const MyElement = () => (
                    &lt;div&gt;
                        Hello {name}!
                    &lt;/div&gt;
                )

                // rendered with &lt;MyElement /&gt;
        aside.notes
            | in order for the compiler to know that an expression should be evaluated as javascript,
            | you have to wrap it in curly braces.


    section
        h3 passing data
        pre
            code.

                const MyElement = ({name}) => (
                    &lt;div&gt;
                        Hello {name}!
                    &lt;/div&gt;
                )

                // rendered with &lt;MyElement name="John"/&gt;



    section(data-background-image="http://i.giphy.com/10fdsa6b79iBDq.gif")
        aside.notes
            | I mean, not only does it make it pretty easy to reason about your interface as pure elements
            | But because everything is pure, there's no need for extreme unit testing and shooting for
            | 100% coverage. You only really need to worry about how your data source changes and
            | the components with complicated display logic.
            br
            | However, it gets even cooler when we start mixing in our functional combinators

    section
        h3 using map in jsx
        pre.flat
            code.
                // &lt;MyElement numbers={[1,2,3]} /&gt;
        br
        pre.flat.fragment.current-visible(data-fragment-index=1)
            code.

                const NumberList = (numbers) =&gt; (
                    &lt;ul&gt;
                        { numbers.map(number =&gt; (
                            &lt;li&gt;
                                {number}
                            &lt;/li&gt;
                        ))}
                    &lt;/ul&gt;
                )
        aside.notes
            ol
                li
                    | Let's consider the example where I want to take a list of numbers and show an html list
                    | composed of ul and li elements with each entry as the square of the numbers in this list
                li
                    | This is easily accomplished using an inline map over the numbers prop. But our functional
                    | tools don't stop becoming useful after mapping over lists

    section
        h3 putting it all together

    section
        pre.flat(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
            code(style="max-height: none").
                const itemsInCart = [{name: 'Steak', price: 25.75}, ...]
        pre.flat(style="max-height: none; font-size: 20px; margin-bottom: 10px;").fragment(data-fragment-index=1)
            code(style="max-height: none").
                // the root shopping cart component
                const ShoppingCart = (items) =&gt; {
                    // figure out the total cost of all the recipes
                    const totalCost = items.reduce((sum, {price}) => sum + price, 0)
                    // render the component
                    return (
                        &lt;div&gt;
                            {items.map(cartItem =&gt; (
                                &lt;ShoppingCartItem {...cartItem}/&gt;
                            ))}
                            &lt;div&gt;
                                Total cost: {totalCost}
                            &lt;/div&gt;
                        &lt;/div&gt;
                    )
                }

                // rendered with &lt;ShoppingCart items={itemsInCart} /&gt;

    section
        pre(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
            code.
                const itemsInCart = [{name: 'Steak', price: 25.75}, ...]

                // ...
                const totalCost = items.reduce((sum, {price}) => sum + price, 0)

                // ...
                &lt;div&gt;
                    {totalCost}
                &lt;/div&gt;

    section
        pre(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
            code.
                const itemsInCart = [{name: 'Steak', price: 25.75}, ...]

                // ...
                {items.map(cartItem =&gt; (
                    &lt;ShoppingCartItem {...cartItem}/&gt;
                ))}
        pre.flat.fragment(data-fragment-index=1)
            code.
                // ...
                const ShoppingCartItem = ({name, date}) => (
                    &lt;div&gt;
                        &lt;div&gt; {name} &lt;/div&gt;
                        &lt;div&gt; {date} &lt;/div&gt;
                    &lt;/div&gt;
                )
