section
    section
        h2 Functional Programming
        h2 in
        h2 JavaScript
    section
        h3 The Function Object
        pre
            code.javascript.
                const myFunction = () => 'hello world'

                console.log(myFunction)

    section
        h3 combinators
    section
        h3 map
        p.example.fragment(data-fragment-index=1)
            | [1,2,3]
            i.fa.fa-long-arrow-right
            | [1,4,9]
    section
        | In the imperative world...
        pre(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
            code(style="max-height: none").
                // we want to square each number in this list
                const numbers = [1,2,3]

                // we'll collect the results in this list
                const results = []

                // visit each element in the array
                for (const i = 0 ; i < numbers.length ; i ++) {
                    // grab the i'th entry
                    const entry = numbers[i]
                    // add the square to the list
                    result.append(entry * entry)
                }

                // results == [1, 4, 9]
    section
        | With our fancy new combinator
        pre
            code.javascript.
                // we want to square each number in this list
                const numbers = [1,2,3]
                // square each number in a single line!
                const results = numbers.map(entry => entry * entry)

                // results == [1, 4, 9]

    section
        h3 filter
        p.example.fragment(data-fragment-index=1)
            | [1,2,3,4]
            i.fa.fa-long-arrow-right
            | [2,4]

    section
        | Then
        pre(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
            code(style="max-height: none").
                // we want to grab every even number in this list
                const numbers = [1,2,3,4,5,6]
                // collect results here
                const results = []

                // go over every number
                for (const i = 0 ; i < numbers.length ; i ++) {
                    // grab the i'th number
                    const number = numbers[i]
                    // if the number is even
                    if (number % 2 == 0) {
                        // add it to the list
                        results.append(number)
                    }
                }

                // results == [2, 4, 6]


    section
        | Now
        pre
            code.javascript.
                // we want to grab every even number in this list
                const numbers = [1,2,3,4,5,6]

                // collect results here
                const results = numbers.filter(entry => entry % 2 == 0)

                // results == [2, 4, 6]

    section
        h3 reduce
        p.example.fragment(data-fragment-index=1)
            | [1,2,3]
            i.fa.fa-long-arrow-right
            | 6
    section
        | The imperative way
        pre(style="max-height: none; font-size: 20px; margin-bottom: 10px;")
            code(style="max-height: none").
                // now we want to add each number in the list
                const numbers = [1,2,3]

                // start off at zero
                const total = 0

                // visit every item
                for (const i = 0 ; i < numbers.length ; i ++) {
                    // grab the i'th number
                    const number = numbers[i]
                    // add the number to the running total
                    total += number
                }

                // total == 6
    section
        | Using reduce,
        pre
            code.javascript.
                // the numbers to sum up
                const numbers = [1,2,3]

                // combine them in a single line
                const total = numbers.reduce((sum, entry) => sum + entry, 0)

                // total == 6